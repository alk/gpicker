AC_INIT([gpicker], @@VERSION@@)
AC_CONFIG_HEADERS(config.h)
AM_INIT_AUTOMAKE
AC_CONFIG_FILES([Makefile lib/Makefile])
AC_PROG_CC
gl_EARLY

AC_ARG_ENABLE(timing, [AS_HELP_STRING(--enable-timing, Enable output of timing info on stderr)],
                      [AC_DEFINE([WITH_TIMING], 1, [Output timing info])])

# check for 'check' unit-testing framework
PKG_CHECK_MODULES([check], [check], [HAVE_CHECK=yes], [
HAVE_CHECK=no
echo "Regression tests will not be built"
])
AM_CONDITIONAL([HAVE_CHECK], [test x$HAVE_CHECK = xyes])

AC_DEFINE([FIND_INVOCATION], ["find . '!' -wholename '*.git/*' -a '!' -wholename '*.hg/*']dnl
[ -a '!' -wholename '*.svn/*' -a '!' -wholename '*.bzr/*']dnl
[ -a '!' -wholename '*CVS/*' -type f -follow -print0"], [Command line to fetch list of files])

PKG_CHECK_MODULES([gtk3], [gtk+-3.0])
PKG_CHECK_MODULES([glib2], [glib-2.0 >= 2.14])

AC_DEFINE([WITH_GUI], 1, [GUI build])

AC_SUBST(EXTRA_CPPFLAGS)

uname_res=`uname -s`
if test "x$uname_res" = "xDarwin"; then
  EXTRA_CPPFLAGS=-xobjective-c
  gtk3_LIBS="$gtk3_LIBS -framework Cocoa"
fi

AC_MSG_CHECKING([whether -m32 is required to link gtk])
AC_LANG_CONFTEST([AC_LANG_CALL([],[gtk_main])])
ac_func_search_save_LIBS=$LIBS
ac_func_search_save_CFLAGS=$CFLAGS
LIBS="$LIBS $gtk3_LIBS $glib2_LIBS"
AC_LINK_IFELSE([], [AC_MSG_RESULT([no])], [
  dnl link failed. Try -m32
  CFLAGS="-m32 $CFLAGS"
  AC_LINK_IFELSE([], [gtk3_CFLAGS="-m32 $gtk3_CFLAGS"],
     [AC_MSG_ERROR([linking with gtk3 failed! Something is wrong.])])
  AC_MSG_RESULT([yes])
])
LIBS=$ac_func_search_save_LIBS
CFLAGS=$ac_func_search_save_CFLAGS

ac_func_search_save_LIBS=$LIBS
ac_func_search_save_CFLAGS=$CFLAGS
ac_func_search_save_CPPLAGS=$CPPFLAGS
CFLAGS="$gtk3_CFLAGS $glib2_CFLAGS $CFLAGS"
CPPFLAGS="$gtk3_CFLAGS $glib2_CFLAGS $CPPFLAGS"
LIBS="$LIBS $gtk3_LIBS $glib2_LIBS"
AC_CHECK_HEADER([gdk/gdkx.h], [AC_DEFINE([WITH_GDK_X11], 1, [GDK wraps X11])])
LIBS=$ac_func_search_save_LIBS
CFLAGS=$ac_func_search_save_CFLAGS
CPPFLAGS=$ac_func_search_save_CPPFLAGS

AC_MSG_CHECKING([whether -fopenmp works])
fopenmp_save_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -fopenmp"
AC_LINK_IFELSE([AC_LANG_PROGRAM([],[
#ifndef _OPENMP
#error openmp does not work
#endif
])], [
  OPENMP_CFLAGS=-fopenmp
  AC_MSG_RESULT([yes])
], [
  AC_MSG_RESULT([no])
])
CFLAGS="$fopenmp_save_CFLAGS"
AC_SUBST(OPENMP_CFLAGS)

gl_INIT

AC_OUTPUT
